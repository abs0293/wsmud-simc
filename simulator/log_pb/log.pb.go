// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: log.proto

package log_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Log_Attack_Kind int32

const (
	Log_Attack_Kind_Unknown Log_Attack_Kind = 0
	Log_Attack_Kind_Main    Log_Attack_Kind = 1
	Log_Attack_Kind_Extra   Log_Attack_Kind = 2
	Log_Attack_Kind_Perform Log_Attack_Kind = 3
)

// Enum value maps for Log_Attack_Kind.
var (
	Log_Attack_Kind_name = map[int32]string{
		0: "Kind_Unknown",
		1: "Kind_Main",
		2: "Kind_Extra",
		3: "Kind_Perform",
	}
	Log_Attack_Kind_value = map[string]int32{
		"Kind_Unknown": 0,
		"Kind_Main":    1,
		"Kind_Extra":   2,
		"Kind_Perform": 3,
	}
)

func (x Log_Attack_Kind) Enum() *Log_Attack_Kind {
	p := new(Log_Attack_Kind)
	*p = x
	return p
}

func (x Log_Attack_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Attack_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[0].Descriptor()
}

func (Log_Attack_Kind) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[0]
}

func (x Log_Attack_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Attack_Kind.Descriptor instead.
func (Log_Attack_Kind) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 0, 0}
}

type Log_Attack_Class int32

const (
	Log_Attack_Class_Unknown  Log_Attack_Class = 0
	Log_Attack_Class_Unarmed  Log_Attack_Class = 1
	Log_Attack_Class_Weapone  Log_Attack_Class = 2
	Log_Attack_Class_Force    Log_Attack_Class = 3
	Log_Attack_Class_Throwing Log_Attack_Class = 4
)

// Enum value maps for Log_Attack_Class.
var (
	Log_Attack_Class_name = map[int32]string{
		0: "Class_Unknown",
		1: "Class_Unarmed",
		2: "Class_Weapone",
		3: "Class_Force",
		4: "Class_Throwing",
	}
	Log_Attack_Class_value = map[string]int32{
		"Class_Unknown":  0,
		"Class_Unarmed":  1,
		"Class_Weapone":  2,
		"Class_Force":    3,
		"Class_Throwing": 4,
	}
)

func (x Log_Attack_Class) Enum() *Log_Attack_Class {
	p := new(Log_Attack_Class)
	*p = x
	return p
}

func (x Log_Attack_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Attack_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[1].Descriptor()
}

func (Log_Attack_Class) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[1]
}

func (x Log_Attack_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Attack_Class.Descriptor instead.
func (Log_Attack_Class) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 0, 1}
}

type Log_Attack_HitCheck_Result int32

const (
	Log_Attack_HitCheck_Result_Unknown Log_Attack_HitCheck_Result = 0
	Log_Attack_HitCheck_Result_Hit     Log_Attack_HitCheck_Result = 1
	Log_Attack_HitCheck_Result_Dodge   Log_Attack_HitCheck_Result = 2
	Log_Attack_HitCheck_Result_Parry   Log_Attack_HitCheck_Result = 3
)

// Enum value maps for Log_Attack_HitCheck_Result.
var (
	Log_Attack_HitCheck_Result_name = map[int32]string{
		0: "Result_Unknown",
		1: "Result_Hit",
		2: "Result_Dodge",
		3: "Result_Parry",
	}
	Log_Attack_HitCheck_Result_value = map[string]int32{
		"Result_Unknown": 0,
		"Result_Hit":     1,
		"Result_Dodge":   2,
		"Result_Parry":   3,
	}
)

func (x Log_Attack_HitCheck_Result) Enum() *Log_Attack_HitCheck_Result {
	p := new(Log_Attack_HitCheck_Result)
	*p = x
	return p
}

func (x Log_Attack_HitCheck_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Attack_HitCheck_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[2].Descriptor()
}

func (Log_Attack_HitCheck_Result) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[2]
}

func (x Log_Attack_HitCheck_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Attack_HitCheck_Result.Descriptor instead.
func (Log_Attack_HitCheck_Result) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 0, 0, 0}
}

type Log_Aura_Event int32

const (
	Log_Aura_Event_Unknown Log_Aura_Event = 0
	Log_Aura_Event_Add     Log_Aura_Event = 1
	Log_Aura_Event_Remove  Log_Aura_Event = 2
	Log_Aura_Event_Refresh Log_Aura_Event = 3
)

// Enum value maps for Log_Aura_Event.
var (
	Log_Aura_Event_name = map[int32]string{
		0: "Event_Unknown",
		1: "Event_Add",
		2: "Event_Remove",
		3: "Event_Refresh",
	}
	Log_Aura_Event_value = map[string]int32{
		"Event_Unknown": 0,
		"Event_Add":     1,
		"Event_Remove":  2,
		"Event_Refresh": 3,
	}
)

func (x Log_Aura_Event) Enum() *Log_Aura_Event {
	p := new(Log_Aura_Event)
	*p = x
	return p
}

func (x Log_Aura_Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Aura_Event) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[3].Descriptor()
}

func (Log_Aura_Event) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[3]
}

func (x Log_Aura_Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Aura_Event.Descriptor instead.
func (Log_Aura_Event) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 2, 0}
}

type SourcedDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Value  float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SourcedDouble) Reset() {
	*x = SourcedDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourcedDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcedDouble) ProtoMessage() {}

func (x *SourcedDouble) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcedDouble.ProtoReflect.Descriptor instead.
func (*SourcedDouble) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *SourcedDouble) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SourcedDouble) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SourcedBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Value  bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SourcedBool) Reset() {
	*x = SourcedBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourcedBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcedBool) ProtoMessage() {}

func (x *SourcedBool) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcedBool.ProtoReflect.Descriptor instead.
func (*SourcedBool) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

func (x *SourcedBool) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SourcedBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Modifier) Reset() {
	*x = Modifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modifier) ProtoMessage() {}

func (x *Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modifier.ProtoReflect.Descriptor instead.
func (*Modifier) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{2}
}

func (x *Modifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Modifier) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    int32       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SerialNumber int32       `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Player       string      `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	Attack       *Log_Attack `protobuf:"bytes,4,opt,name=attack,proto3" json:"attack,omitempty"`
	Run          *Log_Run    `protobuf:"bytes,5,opt,name=run,proto3" json:"run,omitempty"`
	Aura         *Log_Aura   `protobuf:"bytes,6,opt,name=aura,proto3" json:"aura,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3}
}

func (x *Log) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Log) GetSerialNumber() int32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *Log) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

func (x *Log) GetAttack() *Log_Attack {
	if x != nil {
		return x.Attack
	}
	return nil
}

func (x *Log) GetRun() *Log_Run {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *Log) GetAura() *Log_Aura {
	if x != nil {
		return x.Aura
	}
	return nil
}

type Log_Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target         string               `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Source         string               `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Kind           Log_Attack_Kind      `protobuf:"varint,3,opt,name=kind,proto3,enum=protoc.Log_Attack_Kind" json:"kind,omitempty"`
	Class          Log_Attack_Class     `protobuf:"varint,4,opt,name=class,proto3,enum=protoc.Log_Attack_Class" json:"class,omitempty"`
	HitCheck       *Log_Attack_HitCheck `protobuf:"bytes,5,opt,name=hit_check,json=hitCheck,proto3" json:"hit_check,omitempty"`
	DamageMain     float64              `protobuf:"fixed64,6,opt,name=damage_main,json=damageMain,proto3" json:"damage_main,omitempty"`
	TrueDamage     bool                 `protobuf:"varint,7,opt,name=true_damage,json=trueDamage,proto3" json:"true_damage,omitempty"`
	DamageAdd      []*SourcedDouble     `protobuf:"bytes,8,rep,name=damage_add,json=damageAdd,proto3" json:"damage_add,omitempty"`
	DamageImmunity *SourcedBool         `protobuf:"bytes,9,opt,name=damage_immunity,json=damageImmunity,proto3" json:"damage_immunity,omitempty"`
	DamageAbsort   []*SourcedDouble     `protobuf:"bytes,10,rep,name=damage_absort,json=damageAbsort,proto3" json:"damage_absort,omitempty"`
	DamageReflect  []*SourcedDouble     `protobuf:"bytes,11,rep,name=damage_reflect,json=damageReflect,proto3" json:"damage_reflect,omitempty"`
	HpLeech        []*SourcedDouble     `protobuf:"bytes,12,rep,name=hp_leech,json=hpLeech,proto3" json:"hp_leech,omitempty"`
	MpLeech        []*SourcedDouble     `protobuf:"bytes,13,rep,name=mp_leech,json=mpLeech,proto3" json:"mp_leech,omitempty"`
	DamageFinal    float64              `protobuf:"fixed64,14,opt,name=damage_final,json=damageFinal,proto3" json:"damage_final,omitempty"`
	Cooldown       int32                `protobuf:"varint,15,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	Modifier       []*Modifier          `protobuf:"bytes,16,rep,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *Log_Attack) Reset() {
	*x = Log_Attack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Attack) ProtoMessage() {}

func (x *Log_Attack) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Attack.ProtoReflect.Descriptor instead.
func (*Log_Attack) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Log_Attack) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Log_Attack) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Log_Attack) GetKind() Log_Attack_Kind {
	if x != nil {
		return x.Kind
	}
	return Log_Attack_Kind_Unknown
}

func (x *Log_Attack) GetClass() Log_Attack_Class {
	if x != nil {
		return x.Class
	}
	return Log_Attack_Class_Unknown
}

func (x *Log_Attack) GetHitCheck() *Log_Attack_HitCheck {
	if x != nil {
		return x.HitCheck
	}
	return nil
}

func (x *Log_Attack) GetDamageMain() float64 {
	if x != nil {
		return x.DamageMain
	}
	return 0
}

func (x *Log_Attack) GetTrueDamage() bool {
	if x != nil {
		return x.TrueDamage
	}
	return false
}

func (x *Log_Attack) GetDamageAdd() []*SourcedDouble {
	if x != nil {
		return x.DamageAdd
	}
	return nil
}

func (x *Log_Attack) GetDamageImmunity() *SourcedBool {
	if x != nil {
		return x.DamageImmunity
	}
	return nil
}

func (x *Log_Attack) GetDamageAbsort() []*SourcedDouble {
	if x != nil {
		return x.DamageAbsort
	}
	return nil
}

func (x *Log_Attack) GetDamageReflect() []*SourcedDouble {
	if x != nil {
		return x.DamageReflect
	}
	return nil
}

func (x *Log_Attack) GetHpLeech() []*SourcedDouble {
	if x != nil {
		return x.HpLeech
	}
	return nil
}

func (x *Log_Attack) GetMpLeech() []*SourcedDouble {
	if x != nil {
		return x.MpLeech
	}
	return nil
}

func (x *Log_Attack) GetDamageFinal() float64 {
	if x != nil {
		return x.DamageFinal
	}
	return 0
}

func (x *Log_Attack) GetCooldown() int32 {
	if x != nil {
		return x.Cooldown
	}
	return 0
}

func (x *Log_Attack) GetModifier() []*Modifier {
	if x != nil {
		return x.Modifier
	}
	return nil
}

type Log_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target   string       `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	CastTime int32        `protobuf:"varint,3,opt,name=cast_time,json=castTime,proto3" json:"cast_time,omitempty"`
	Cooldown int32        `protobuf:"varint,4,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	MpCost   float64      `protobuf:"fixed64,5,opt,name=mp_cost,json=mpCost,proto3" json:"mp_cost,omitempty"`
	Fail     *SourcedBool `protobuf:"bytes,6,opt,name=fail,proto3" json:"fail,omitempty"`
}

func (x *Log_Run) Reset() {
	*x = Log_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Run) ProtoMessage() {}

func (x *Log_Run) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Run.ProtoReflect.Descriptor instead.
func (*Log_Run) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Log_Run) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Log_Run) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Log_Run) GetCastTime() int32 {
	if x != nil {
		return x.CastTime
	}
	return 0
}

func (x *Log_Run) GetCooldown() int32 {
	if x != nil {
		return x.Cooldown
	}
	return 0
}

func (x *Log_Run) GetMpCost() float64 {
	if x != nil {
		return x.MpCost
	}
	return 0
}

func (x *Log_Run) GetFail() *SourcedBool {
	if x != nil {
		return x.Fail
	}
	return nil
}

type Log_Aura struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type      string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Event     Log_Aura_Event `protobuf:"varint,3,opt,name=event,proto3,enum=protoc.Log_Aura_Event" json:"event,omitempty"`
	Remaining int32          `protobuf:"varint,4,opt,name=remaining,proto3" json:"remaining,omitempty"`
	Debuff    bool           `protobuf:"varint,5,opt,name=debuff,proto3" json:"debuff,omitempty"`
	Stacks    int32          `protobuf:"varint,6,opt,name=stacks,proto3" json:"stacks,omitempty"`
	Modifier  []*Modifier    `protobuf:"bytes,7,rep,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *Log_Aura) Reset() {
	*x = Log_Aura{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Aura) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Aura) ProtoMessage() {}

func (x *Log_Aura) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Aura.ProtoReflect.Descriptor instead.
func (*Log_Aura) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Log_Aura) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Log_Aura) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Log_Aura) GetEvent() Log_Aura_Event {
	if x != nil {
		return x.Event
	}
	return Log_Aura_Event_Unknown
}

func (x *Log_Aura) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *Log_Aura) GetDebuff() bool {
	if x != nil {
		return x.Debuff
	}
	return false
}

func (x *Log_Aura) GetStacks() int32 {
	if x != nil {
		return x.Stacks
	}
	return 0
}

func (x *Log_Aura) GetModifier() []*Modifier {
	if x != nil {
		return x.Modifier
	}
	return nil
}

type Log_Attack_HitCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackerHit float64                    `protobuf:"fixed64,2,opt,name=attacker_hit,json=attackerHit,proto3" json:"attacker_hit,omitempty"`
	TargetDodge float64                    `protobuf:"fixed64,3,opt,name=target_dodge,json=targetDodge,proto3" json:"target_dodge,omitempty"`
	TargetParry float64                    `protobuf:"fixed64,4,opt,name=target_parry,json=targetParry,proto3" json:"target_parry,omitempty"`
	Result      Log_Attack_HitCheck_Result `protobuf:"varint,5,opt,name=result,proto3,enum=protoc.Log_Attack_HitCheck_Result" json:"result,omitempty"`
}

func (x *Log_Attack_HitCheck) Reset() {
	*x = Log_Attack_HitCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Attack_HitCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Attack_HitCheck) ProtoMessage() {}

func (x *Log_Attack_HitCheck) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Attack_HitCheck.ProtoReflect.Descriptor instead.
func (*Log_Attack_HitCheck) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *Log_Attack_HitCheck) GetAttackerHit() float64 {
	if x != nil {
		return x.AttackerHit
	}
	return 0
}

func (x *Log_Attack_HitCheck) GetTargetDodge() float64 {
	if x != nil {
		return x.TargetDodge
	}
	return 0
}

func (x *Log_Attack_HitCheck) GetTargetParry() float64 {
	if x != nil {
		return x.TargetParry
	}
	return 0
}

func (x *Log_Attack_HitCheck) GetResult() Log_Attack_HitCheck_Result {
	if x != nil {
		return x.Result
	}
	return Log_Attack_HitCheck_Result_Unknown
}

var File_log_proto protoreflect.FileDescriptor

var file_log_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x22, 0x3d, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x34, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x0e, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x52,
	0x75, 0x6e, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x75, 0x72, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x4c,
	0x6f, 0x67, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x52, 0x04, 0x61, 0x75, 0x72, 0x61, 0x1a, 0x86, 0x09,
	0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x4c, 0x6f,
	0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x48, 0x69, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x08, 0x68, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x62, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x62, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x30, 0x0a, 0x08, 0x68, 0x70, 0x5f, 0x6c, 0x65, 0x65, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x68, 0x70, 0x4c, 0x65, 0x65, 0x63,
	0x68, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x65, 0x63, 0x68, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x70, 0x4c, 0x65,
	0x65, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x81, 0x02, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x64, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f,
	0x64, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x48, 0x69, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x50, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x48, 0x69, 0x74, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x44, 0x6f, 0x64, 0x67, 0x65,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x50, 0x61, 0x72,
	0x72, 0x79, 0x10, 0x03, 0x22, 0x49, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x03, 0x22,
	0x65, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x65, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x54, 0x68, 0x72, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x1a, 0xac, 0x01, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x66, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x1a, 0xa8, 0x02, 0x0a, 0x04, 0x41, 0x75, 0x72, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x4c,
	0x6f, 0x67, 0x2e, 0x41, 0x75, 0x72, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x62, 0x75, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x62, 0x75, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x4e, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x10, 0x03,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData = file_log_proto_rawDesc
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_log_proto_rawDescData)
	})
	return file_log_proto_rawDescData
}

var file_log_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_log_proto_goTypes = []interface{}{
	(Log_Attack_Kind)(0),            // 0: protoc.Log.Attack.Kind
	(Log_Attack_Class)(0),           // 1: protoc.Log.Attack.Class
	(Log_Attack_HitCheck_Result)(0), // 2: protoc.Log.Attack.HitCheck.Result
	(Log_Aura_Event)(0),             // 3: protoc.Log.Aura.Event
	(*SourcedDouble)(nil),           // 4: protoc.SourcedDouble
	(*SourcedBool)(nil),             // 5: protoc.SourcedBool
	(*Modifier)(nil),                // 6: protoc.Modifier
	(*Log)(nil),                     // 7: protoc.Log
	(*Log_Attack)(nil),              // 8: protoc.Log.Attack
	(*Log_Run)(nil),                 // 9: protoc.Log.Run
	(*Log_Aura)(nil),                // 10: protoc.Log.Aura
	(*Log_Attack_HitCheck)(nil),     // 11: protoc.Log.Attack.HitCheck
}
var file_log_proto_depIdxs = []int32{
	8,  // 0: protoc.Log.attack:type_name -> protoc.Log.Attack
	9,  // 1: protoc.Log.run:type_name -> protoc.Log.Run
	10, // 2: protoc.Log.aura:type_name -> protoc.Log.Aura
	0,  // 3: protoc.Log.Attack.kind:type_name -> protoc.Log.Attack.Kind
	1,  // 4: protoc.Log.Attack.class:type_name -> protoc.Log.Attack.Class
	11, // 5: protoc.Log.Attack.hit_check:type_name -> protoc.Log.Attack.HitCheck
	4,  // 6: protoc.Log.Attack.damage_add:type_name -> protoc.SourcedDouble
	5,  // 7: protoc.Log.Attack.damage_immunity:type_name -> protoc.SourcedBool
	4,  // 8: protoc.Log.Attack.damage_absort:type_name -> protoc.SourcedDouble
	4,  // 9: protoc.Log.Attack.damage_reflect:type_name -> protoc.SourcedDouble
	4,  // 10: protoc.Log.Attack.hp_leech:type_name -> protoc.SourcedDouble
	4,  // 11: protoc.Log.Attack.mp_leech:type_name -> protoc.SourcedDouble
	6,  // 12: protoc.Log.Attack.modifier:type_name -> protoc.Modifier
	5,  // 13: protoc.Log.Run.fail:type_name -> protoc.SourcedBool
	3,  // 14: protoc.Log.Aura.event:type_name -> protoc.Log.Aura.Event
	6,  // 15: protoc.Log.Aura.modifier:type_name -> protoc.Modifier
	2,  // 16: protoc.Log.Attack.HitCheck.result:type_name -> protoc.Log.Attack.HitCheck.Result
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourcedDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourcedBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Attack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Aura); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Attack_HitCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_log_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		EnumInfos:         file_log_proto_enumTypes,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_rawDesc = nil
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
